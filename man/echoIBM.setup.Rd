% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/echoIBM.getPath.R, R/echoIBM.readFile.R,
%   R/echoIBM.setBeams.R, R/echoIBM.setCTD.R, R/echoIBM.setCalibration.R,
%   R/echoIBM.setNoise.R, R/echoIBM.setSchool.R, R/echoIBM.setVessel.R,
%   R/echoIBM.setVessel_old.R, R/plslTable.R, R/replaceKeepDim.R
\name{echoIBM.getPath}
\alias{echoIBM.getPath}
\alias{echoIBM.readFile}
\alias{echoIBM.setBeams}
\alias{echoIBM.setCTD}
\alias{echoIBM.setCalibration}
\alias{echoIBM.setNoise}
\alias{echoIBM.setSchool}
\alias{echoIBM.setVessel}
\alias{echoIBM.getVesselPath}
\alias{echoIBM.setVessel_old}
\alias{plslTable}
\alias{replaceKeepDim}
\title{Returns a list of the following strings: (1) the path to the event, (2) the event name, (3) the event number, (4) the path to the cruise, and (5) the cruise name.}
\usage{
echoIBM.getPath(starttime = "2015-01-01 00:00:00", origin = NULL,
  heading = NULL, distance = NULL, speed = NULL, duration = NULL,
  nodesLocal = NULL, nodesEarth = NULL, utim = NULL,
  pingduration = 1, heave = 0, rtx = 0, rty = 0, rtz = NULL,
  type = "v")

echoIBM.readFile(path, ext = "vessel", t = 1)

echoIBM.setBeams(event, files = NULL, maxrange = list(),
  mode = "CWNormal", ...)

echoIBM.setCTD(event, files = NULL, ...)

echoIBM.setCalibration(event, files = NULL, ...)

echoIBM.setNoise(event, files = NULL, nr0a = list(), ...)

echoIBM.setSchool(event, surveyRegion = NULL,
  expandSurveyRegion = NULL, target = c("herring", "mackerel",
  "point"), schools = c("layer", "uniform", "flat"),
  schoolSize = list(x = 100, y = 100, z = 20, type = "Weibull", shape =
  5, cor = 0.4), schoolDens = 1852^-2, schoolDist = NULL,
  schoolCount = NULL, fillSurveyRegion = TRUE, seed = 0,
  depthRange = c(-100, 0), onlyFirstEvent = FALSE, ...)

echoIBM.setVessel(event, starttime = "2015-01-01 00:00:00",
  utim = NULL, origin = c(0, 0), heading = 0, distance = NULL,
  duration = 1, speed = NULL, nodesLocal = NULL, nodesEarth = NULL,
  pingduration = 1, numt = NULL, heave = 0, rtxv = 0, rtyv = 0,
  rtzv = 0, offset = NULL, freeze = NULL, ...)

echoIBM.getVesselPath(starttime = "2015-01-01 00:00:00", origin = NULL,
  heading = NULL, distance = NULL, speed = NULL, duration = NULL,
  nodesLocal = NULL, nodesEarth = NULL, utim = NULL,
  pingduration = 1, numt = NULL, heave = 0, rtxv = 0, rtyv = 0,
  rtzv = 0)

echoIBM.setVessel_old(events, eventName,
  starttime = "2015-01-01 00:00:00", origin = NULL, heading = NULL,
  distance = NULL, speed = NULL, duration = NULL,
  nodesLocal = NULL, nodesEarth = NULL, utim = NULL, numt = 1,
  pingduration = 1, heave = 0, rtxv = 0, rtyv = 0, rtzv = NULL,
  ...)

plslTable(range = NULL, mode = "CWNormal")

replaceKeepDim(x, replacement, esnm, ...)
}
\arguments{
\item{starttime}{The start time of the event, i.e., the time of the first ping/vessel position, either given as a time object or a string such as "2015-01-01 00:00:00".}

\item{origin}{The origin of the event, i.e., a vector of two elements giving the longitude and latitude of the first ping.}

\item{heading}{The heading of the vessel in radians counter clockwise from East, either given as a single numeric, or as a vector of headings associated with vessel track segments.}

\item{distance}{The distance associated with each vessel track segment.}

\item{speed}{The speed of the vessel in knots, associated with each vessel track segment.}

\item{duration}{The duration of each vessel track segment in seconds.}

\item{nodesLocal}{The nodes defining the vessel track segments, given as local nodes relative to the origin (can include the origin c(0, 0))}

\item{nodesEarth}{The nodes defining the vessel track segments, given as global nodes in the coordinate system of the earth relative to the origin (can include the origin c(0, 0)).}

\item{utim}{The UNIX time points of the event. If not given, the starttime and pingduration will define the UNIX time points.}

\item{pingduration}{The duration of the pings in seconds. Currently only one single fixed value is allowed.}

\item{heave}{The heave of the vessel in meters, either given as a single value, a vector of length equal to the number of vessel track segments, or alternatively a funciton of the number of time steps such as rnorm() or the more appropriate function(x) {set.seed(x); runif(x)}, which sets the seed as the number of time steps.}

\item{path}{A list of the following elements: (1) 'path', giving the paths to the sub-events, (2) 'esnm', giving the names of the acoustic instruments in the events (same length as 'path'), and (3) 'name', giving the name of the event.}

\item{ext}{A string naming the file extension of the file to read.}

\item{t}{The time steps to read.}

\item{event}{is the identifier of the event, either given as the number of the event, a string contained in the name of the event, or the path of the event directory.}

\item{files}{An optional vector of file names to be read and written to the simulation events. If empty (default) the resource files of the echoIBM package are used.}

\item{maxrange}{The maximum range of the sonar in meters.}

\item{mode}{The mode of the sonar. See available modes with plslTable().}

\item{...}{Data overriding the variables generated by the funciton.}

\item{surveyRegion}{A data frame of two rows and the three columns x, y and z, defining the survey region.}

\item{target}{A code word defining the target. One of "herring", "mackerel" and "point".}

\item{schools}{A code word defining the distribution of schools. One of "layer", "uniform" (equal probability of encountering a school in all directions but the z direction, corresponding to a homogenious Poisson point process in the x-y-plane), "flat" (random ordering of schools sequenced between the survey bounds).}

\item{schoolSize}{Definition of the school sizes, either given as a list of dimensions in the x, y and z direction (repeated to the number of schools), or a list of dimensions added a type of random generator for the sizes, such as type = "weibull", indicating correlated Weibull distributed sizes, where the shape and correlation are specified by 'shape' and 'cor'. Alternatively schoolSize can be a list to be used as input the a function schoolSize$type, which must be a function including the ... argument to avoid errors. For correlated Weibull distributed sizes use e.g. list(x = 100, y = 100, z = 20, type = "Weibull", shape = 5, cor = 0.4), where 0.4 is the maximum available correlation. For correlated uniform variables use e.g. list(x = c(30, 300), y = c(30, 300), z = c(30, 300) / 5, type = "Uniform", cor = 0.5), where 0.5 is the maximum available correlation. For schoolSize$type=="Uniform", if schoolSize$x is given as a single numeric, this is interpreted as uniform between 0 and 2 * x.}

\item{schoolDens}{The area reserved for each school.}

\item{schoolDist}{The mean distance betseen schools. Use rather schoolDens.}

\item{schoolCount}{The number of schools.}

\item{fillSurveyRegion}{Logical: If TRUE fill the survey region so that schools are generated also outside of the original survey region, elliminating edge effects in the spatial distribution of fish.}

\item{seed}{The seed of the school generation}

\item{depthRange}{The depth range of the schools. Should be given in the \code{surveyRegion}.}

\item{onlyFirstEvent}{Logical: If TRUE generate school files only for the first event (saving storage).}

\item{rtxv}{The pitch of the vessel in radians positive for uppwards pitch (bow lifting). See info.TSD("rtxv")}

\item{rtyv}{The roll of the vessel in radians positive for starboard side tilted down. See info.TSD("rtyv")}

\item{rtzv}{The orientation of the vessel in radians counter clockwise, IN ADDITION to the heading of the vessel specified in \code{heading}. See info.TSD("rtzv")}

\item{range}{The max range of the sonar.}

\item{x}{The list to replace values in.}

\item{replacement}{A list of the values to replace.}

\item{esnm}{is the name of the acoustical instrument, given as a four character string. See sonR_implemented() for the implemented systems. May be given in 'data', and in lower case.}

\item{cruise}{is either the idenfication number of the cruise, given as specified by the IMR (yyyynnn), or the path to the directory containing the event to be read.}

\item{dir.type}{is the name of the directory holding the data files (usually one of "tsd" and "raw")}

\item{event}{A list of the following elements: (1) 'path', giving the paths to the sub-events, (2) 'esnm', giving the names of the acoustic instruments in the events (same length as 'path'), and (3) 'name', giving the name of the event.}

\item{event}{A list of the following elements: (1) 'path', giving the paths to the sub-events, (2) 'esnm', giving the names of the acoustic instruments in the events (same length as 'path'), and (3) 'name', giving the name of the event.}

\item{files}{An optional vector of file names to be read and written to the simulation events. If empty (default) the resource files of the echoIBM package are used.}

\item{...}{Data overriding the variables generated by the funciton.}

\item{event}{A list of the following elements: (1) 'path', giving the paths to the sub-events, (2) 'esnm', giving the names of the acoustic instruments in the events (same length as 'path'), and (3) 'name', giving the name of the event.}

\item{files}{An optional vector of file names to be read and written to the simulation events. If empty (default) the resource files of the echoIBM package are used.}

\item{...}{Data overriding the variables generated by the funciton.}

\item{event}{A list of the following elements: (1) 'path', giving the paths to the sub-events, (2) 'esnm', giving the names of the acoustic instruments in the events (same length as 'path'), and (3) 'name', giving the name of the event.}

\item{files}{An optional vector of file names to be read and written to the simulation events. If empty (default) the resource files of the echoIBM package are used.}

\item{...}{Data overriding the variables generated by the funciton.}

\item{event}{A list of the following elements: (1) 'path', giving the paths to the sub-events, (2) 'esnm', giving the names of the acoustic instruments in the events (same length as 'path'), and (3) 'name', giving the name of the event.}

\item{...}{Data overriding the variables generated by the funciton.}

\item{event}{A list of the following elements: (1) 'path', giving the paths to the sub-events, (2) 'esnm', giving the names of the acoustic instruments in the events (same length as 'path'), and (3) 'name', giving the name of the event.}

\item{...}{Data overriding the variables generated by the funciton.}

\item{event}{is the identifier of the event, either given as the number of the event, a string contained in the name of the event, or the path of the event directory.}

\item{cruise}{is either the idenfication number of the cruise, given as specified by the IMR (yyyynnn), or the path to the directory containing the event to be read.}

\item{esnm}{is the name of the acoustical instrument, given as a four character string. See sonR_implemented() for the implemented systems. May be given in 'data', and in lower case.}

\item{dir.type}{is the name of the directory holding the data files (usually one of "tsd" and "raw")}

\item{...}{is used in agrep() for locating events based on approximate string matching.}

\item{mode}{The mode of the sonar. Use plslTable() to get avaialbe modes.}

\item{esnm}{The name of the sonar, used when the replacement is a list with \code{esnm} as names.}

\item{...}{Arguments passed on to replacement functions.}
}
\value{





















}
\description{
The vessel information can be given in 4 ways: 
\itemize{
\item nodesEarth + speed
\item origin + nodesLocal + speed
\item origin + heading + distance + speed
\item origin + heading + duration + speed
}
}
\examples{
\dontrun{}

\dontrun{}

\dontrun{}

\dontrun{}

\dontrun{}

\dontrun{}

\dontrun{}

\dontrun{}

\dontrun{}

\dontrun{}

\dontrun{}

}
